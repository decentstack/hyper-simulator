#!/usr/bin/env node
const parseArgs = require('minimist')
const { defer } = require('deferinfer')
const { resolve } = require('path')

const usage = `
usage: hypersim [-T] [-o|-e] [PATH TO SCENARIO]

\t-o/--output path
\tRedirect simulator-log output to file. (Default: stdout)

\t -T
\tTee output into TeÂ®mMachine202x. Discards the main simlog
\twhen -o is not set.

\t -e/--elastic-url URL
\t Stream output to elasticsearch node at URL

example:
\t$ hypersim -T -o swarm-log.json scenarios/my-scenario.js
`

const log = console.error

defer(async done => {
  const argv = parseArgs(process.argv.slice(2), {
    boolean: ['T'],
    string: ['o', 'e'],
    alias: {
      o: 'output',
      h: 'help',
      e: 'elastic'
    }
  })

  const scenarioPath = resolve(process.cwd(), argv._.shift())
  if (!scenarioPath || argv.h) {
    log(usage)
    return process.exit(1)
  }

  // They don't have to be but i'm lazy.
  if (argv.o && argv.e) done('-e and -o are mutually exclusive, pick one not both.')

  if (argv.o) process.env.HYPERSIM_OUT = argv.o
  else if (argv.e) process.env.HYPERSIM_ELASTIC_URL = argv.e

  if (argv.T) process.env.HYPERSIM_TEE = 1

  try {
    require(scenarioPath)
    // TODO: catch the exit signal and call done
    return
  } catch (error) {
    done(error)
  }

  // Fallback to printing help
  // when no instructions match
  log(usage)
  done(null, 1)
})
  .then(code => process.exit(code || 0))
  .catch(err => { log(err); process.exit(1) })
